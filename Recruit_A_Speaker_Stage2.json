{
  "name": "Recruit_A_Speaker_Stage2",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/slack-interactions",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        64,
        0
      ],
      "id": "5b7d8f67-f64c-4212-a234-f20a3c79d2f8",
      "name": "Webhook",
      "webhookId": "a79f6390-c0fb-4286-b25e-370b2ba59a15"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09DLDXFGHW",
          "mode": "id"
        },
        "text": "=outreach has been started for  \"{{ $json.linkedin_url }}\" for \"{{ $json.event_data.event_topic }}\"\"",
        "otherOptions": {
          "includeLinkToWorkflow": false,
          "unfurl_links": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        496,
        0
      ],
      "id": "ce77560f-1e78-4877-b27a-4ecdc5851a8a",
      "name": "Send a message",
      "webhookId": "7b5c8c6c-fd93-4979-b223-53577b767ff9",
      "credentials": {
        "slackApi": {
          "id": "n2dMlXzdJSEwODNV",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Query', ``, 'string') }}",
        "options": {}
      },
      "type": "@tavily/n8n-nodes-tavily.tavilyTool",
      "typeVersion": 1,
      "position": [
        896,
        208
      ],
      "id": "fa5d266d-370d-449e-be12-36d8ae08204d",
      "name": "TavilySearch",
      "credentials": {
        "tavilyApi": {
          "id": "YpRn8BPceKXPfsay",
          "name": "Tavily account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\"profile_data\": {\n\"full_name\": \"extracted name\",\n\"current_title\": \"current job title\",\n\"current_company\": \"company name\",\n\"location\": \"city, country\",\n\"headline\": \"LinkedIn headline/summary\",\n\"about_section\": \"brief about section if available\",\n\"current_role_description\": \"current role details\",\n\"work_experience\": [\n{\n\"title\": \"previous job title\",\n\"company\": \"previous company\",\n\"duration\": \"time period\",\n\"description\": \"brief role description\"\n}\n],\n\"education\": [\n{\n\"degree\": \"degree type\",\n\"institution\": \"school/university name\",\n\"years\": \"graduation year or period\"\n}\n],\n\"skills\": [\"skill1\", \"skill2\", \"skill3\"],\n\"industry\": \"industry/sector\",\n\"certifications\": [\"cert1\", \"cert2\"]\n}\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1040,
        208
      ],
      "id": "86cedc05-fa66-475f-b83f-f5e1e9e6e05d",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        752,
        208
      ],
      "id": "59ea32e3-0b38-4473-88f9-d7c60d61c8f1",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "JoCkVMwB4xajc9Kb",
          "name": "Shailesh"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a LinkedIn Profile Data Extraction Agent. Your task is to extract profile information from a specific LinkedIn URL using only Tavily Search.\n\n## Your Mission:\nExtract key profile details that would provide conversational context for business outreach. Focus only on publicly available LinkedIn profile information.\n\n## Extraction Guidelines:\n- Use ONLY the provided LinkedIn profile URL\n- Do NOT search other websites or sources\n- Do NOT perform deep web searches beyond the profile page\n- Extract standard LinkedIn profile information visible on the page\n- Keep information concise and relevant for business conversation context\n\n## Required Information to Extract:\n**Basic Info:**\n- Full name\n- Current job title\n- Current company name\n- Location (city/country)\n- Profile headline or summary\n\n**Professional Background:**\n- Current role description (if available)\n- Previous 1-2 work experiences (title, company, duration)\n- Educational background (degree, institution)\n- Key skills or expertise areas mentioned\n\n**Context for Outreach:**\n- Industry/sector they work in\n- Years of experience (if inferrable)\n- Any notable achievements or certifications mentioned\n- Company size/type (startup, enterprise, etc.)\n\n## What NOT to Include:\n- Personal contact information\n- Private/restricted content\n- Information from other websites\n- Deep analysis or interpretation\n- Unrelated profile visitors or connections data\n\n## Required Output Format:\nReturn ONLY a JSON object with this exact structure:\n\n{\n\"profile_data\": {\n\"full_name\": \"extracted name\",\n\"current_title\": \"current job title\",\n\"current_company\": \"company name\",\n\"location\": \"city, country\",\n\"headline\": \"LinkedIn headline/summary\",\n\"about_section\": \"brief about section if available\",\n\"current_role_description\": \"current role details\",\n\"work_experience\": [\n{\n\"title\": \"previous job title\",\n\"company\": \"previous company\",\n\"duration\": \"time period\",\n\"description\": \"brief role description\"\n}\n],\n\"education\": [\n{\n\"degree\": \"degree type\",\n\"institution\": \"school/university name\",\n\"years\": \"graduation year or period\"\n}\n],\n\"skills\": [\"skill1\", \"skill2\", \"skill3\"],\n\"industry\": \"industry/sector\",\n\"certifications\": [\"cert1\", \"cert2\"]\n}\n}\n\n\n## Execution Instructions:\n1. Use Tavily Search to access the LinkedIn profile URL: \n{{ $('profile_extract').item.json.linkedin_url }}\n\n2. Extract only the information available on that specific profile page\n3. Structure the data according to the JSON format above\n4. Ensure all extracted information is accurate and directly from the profile\n5. If any field is not available, use empty string \"\" or empty array []\n\nBegin extraction now focusing on gathering relevant professional context for business outreach conversation.\n\nInput Data:\n\"linkedin_url\": {{ $('profile_extract').item.json.linkedin_url }}\n\n",
        "hasOutputParser": true,
        "options": {
          "maxIterations": 50
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        800,
        0
      ],
      "id": "a263f081-1a5f-4d53-86de-1e9095d9b7e3",
      "name": "Linkedin_Profile_Analyser",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const approvalData = $('profile_extract').first().json;\n\n// Get profile data from LinkedIn Profile Scraper node \nconst profileData = $('Linkedin_Profile_Analyser').first().json['output']['profile_data'];\n\n// Initialize conversation context\nconst conversationContext = {\n  // Conversation tracking\n  conversation_id: `conv_${Date.now()}`,\n  exchange_count: 0,\n  max_exchanges: 2,\n  status: \"initiating\",\n  next_action: \"send_initial_message\",\n  \n  // LinkedIn target info\n  linkedin_url: approvalData.linkedin_url,\n  \n  // Event details for messaging context\n  event_data: {\n    event_type: approvalData.event_data.event_type,\n    event_topic: approvalData.event_data.event_topic,\n    event_date: approvalData.event_data.event_date,\n    event_location: approvalData.event_data.event_location,\n    audience: approvalData.event_data.audience\n  },\n  \n  // Speaker profile for personalization\n  profile_data: {\n    full_name: profileData.full_name,\n    current_title: profileData.current_title,  \n    current_company: profileData.current_company,\n    headline: profileData.headline,\n    about_section: profileData.about_section,\n    skills: profileData.skills,\n    industry: profileData.industry,\n    certifications: profileData.certifications\n  },\n  \n  // Slack user info for notifications\n  slack_user_id: approvalData.user_id,\n  slack_user_name: approvalData.user_name,\n  \n  // Metadata\n  timestamp: new Date().toISOString()\n};\n\nreturn [{ json: conversationContext }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1152,
        0
      ],
      "id": "51a7f1a0-0a78-4641-a911-b125fc0cfd6d",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// Process Slack button interaction payload\nconst body = items[0].json.body;\nlet interactionData;\n\n// Parse the form-encoded payload from Slack\ntry {\n  if (body.payload) {\n    interactionData = JSON.parse(body.payload);\n  } else {\n    interactionData = body;\n  }\n} catch (error) {\n  return [{\n    json: {\n      error: \"Failed to parse Slack interaction\",\n      raw_body: body\n    }\n  }];\n}\n\n// Check if this is an approve button click\nif (interactionData.type !== \"block_actions\" || \n    !interactionData.actions || \n    interactionData.actions[0].action_id !== \"approve_profile\") {\n  \n  // Not an approve action, ignore\n  return [];\n}\n\n// Extract the approval data\nconst action = interactionData.actions[0];\nconst actionValue = JSON.parse(action.value);\nconst user = interactionData.user;\n\nconst approvalData = {\n  // From button value\n  linkedin_url: actionValue.linkedin_url,\n  profile_index: actionValue.profile_index,\n  event_data: actionValue.event_data, // If you included it in Step 1\n  \n  // From Slack interaction\n  user_id: user.id,\n  user_name: user.name,\n  channel_id: interactionData.channel?.id,\n  message_ts: interactionData.message?.ts,\n  trigger_id: interactionData.trigger_id,\n  \n  // Metadata\n  timestamp: new Date().toISOString(),\n  action_type: \"approve_speaker\"\n};\n\nreturn [{ json: approvalData }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        272,
        0
      ],
      "id": "71da8f0a-78d6-4a45-bcd2-47c252fe12a8",
      "name": "profile_extract"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert LinkedIn outreach specialist with extensive experience in speaker recruitment for professional events. Your task is to craft highly personalized, engaging initial messages that convert prospects into interested speakers.\n\n## Input Context:\n**Speaker Profile:**\n- Name: {{ $json.profile_data.full_name }}\n- Title: {{ $json.profile_data.current_title }}\n- Company: {{ $json.profile_data.current_company }}\n- Location: {{ $json.event_data.event_location }}\n- Headline: {{ $json.profile_data.headline }}\n- About: {{ $json.profile_data.about_section }}\n- Industry: {{ $json.profile_data.industry }}\n- Skills: {{ $json.profile_data.skills }}\n\n**Event Details:**\n- Type: {{ $json.event_data.event_type }}\n- Topic: {{ $json.event_data.event_topic }}\n- Date: {{ $json.event_data.event_date }}\n- Location: {{ $json.event_data.event_location }}\n- Audience: {{ $json.event_data.audience }}\n\n## Personalization Strategy:\n1. **Connection Hook**: Reference specific aspects of their current role, company, or recent achievements\n2. **Relevance Bridge**: Connect their expertise directly to the event topic\n3. **Value Proposition**: Highlight why this speaking opportunity aligns with their professional interests\n4. **Audience Alignment**: Mention how their background resonates with the target audience\n5. **Geographic Relevance**: Reference location synergy when applicable\n\n## Message Structure Formula:\n**Opening**: Personalized acknowledgment of their expertise/role\n**Bridge**: Connect their background to event relevance  \n**Invitation**: Clear, specific event invitation with key details\n**Value**: Brief mention of audience/opportunity value\n**CTA**: Engaging question that invites dialogue\n\n## Professional Guidelines:\n- **Tone**: Professional yet approachable, respectful, enthusiastic\n- **Length**: 280-300 characters maximum (LinkedIn message limit)\n- **Personalization**: Include at least 2 specific details from their profile\n- **Specificity**: Mention concrete event details (type, topic, date)\n- **Engagement**: End with an open question that requires more than yes/no\n- **Avoid**: Generic templates, overly formal language, pushy sales tone\n\n## Character Optimization Tips:\n- Use contractions where appropriate (\"I'd\", \"we're\")\n- Replace long phrases with concise alternatives\n- Prioritize most important details if space is limited\n- Use \"&\" instead of \"and\" when necessary\n\n## Personalization Examples:\n- **Tech Leader**: \"Your work scaling AI at [Company]...\"\n- **Industry Expert**: \"Your expertise in [specific domain]...\"\n- **Location**: \"As a fellow [City] professional...\" (if same city)\n- **Company**: \"Given [Company]'s leadership in [industry]...\"\n- **Skills**: \"Your background in [specific skill/technology]...\"\n\n## Response-Driving Elements:\n- Ask about their interest in the topic area\n- Inquire about their availability timeframe\n- Request their perspective on industry trends\n- Invite them to learn more about the opportunity\n- Ask about their speaking experience/interests\n\n## Quality Checklist:\n✓ Includes speaker's name and 1-2 specific profile details\n✓ Mentions event type, topic, and date\n✓ Under 300 characters\n✓ Ends with engaging question\n✓ Professional yet personable tone\n✓ No generic or template language\n✓ Clear value proposition for the speaker\n\n## Common Pitfalls to Avoid:\n❌ \"I hope this message finds you well\" (wastes characters)\n❌ \"I came across your profile\" (obvious and generic)\n❌ Lengthy company/event descriptions\n❌ Multiple questions in one message\n❌ Overly formal corporate speak\n❌ Mentioning how you found them\n\n## Output Requirement:\nGenerate ONLY the message text as a single string, ready to send via LinkedIn. Do not include any explanations, formatting, or additional commentary.\n\nalways conclude with a opening question on if they would like to be a speaker (not directly but mention the word speak in some form, speaking, speaker etc which conveys the intent)\n\ndont keep it long, keep it interesting and end with an open ended question.\n\nNow generate a highly personalized LinkedIn message using the provided speaker profile and event data.\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1360,
        0
      ],
      "id": "45760a77-9caa-4bf6-a045-39503240d434",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1344,
        192
      ],
      "id": "f54c068e-9dd3-4633-a831-f4039329df74",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "JoCkVMwB4xajc9Kb",
          "name": "Shailesh"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api10.unipile.com:14019/api/v1/chats",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "XHWV27Up.JbPrur+wrsgBJilxHlfCqb1Y8mwO3A/Z0b+wj6a1eyY="
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "attendees_ids",
              "value": "ACoAAEc7oBgBa03bU7vPx6NPPsNv4trAeKw6qqA"
            },
            {
              "name": "account_id",
              "value": "BTpnX38WTTe5eCx9_Iq_tw"
            },
            {
              "name": "text",
              "value": "={{ $json.output }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1712,
        0
      ],
      "id": "888f5cb1-784a-4a2b-8c87-fccff1edf405",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "jsCode": "// Initialize conversation polling after initial LinkedIn message sent\nconst conversationContext = items[0].json;\n\n// Create polling configuration\nconst pollingConfig = {\n  conversation_id: conversationContext.conversation_id,\n  linkedin_url: conversationContext.linkedin_url,\n  event_data: conversationContext.event_data,\n  profile_data: conversationContext.profile_data,\n  slack_user_id: conversationContext.slack_user_id,\n  chat_id: $('HTTP Request2').first().json['chat_id'],\n  \n  // Polling state\n  exchange_count: 0,\n  max_exchanges: 2,\n  polling_interval: 5000, // 5 seconds\n  last_checked_timestamp: new Date().toISOString(),\n  conversation_active: true,\n  \n  // Message tracking\n  last_message_from: \"system\", // \"system\", \"user\", \"speaker\"\n  last_message_content: \"\",\n  messages_history: []\n};\n\nreturn [{ json: pollingConfig }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        16,
        416
      ],
      "id": "4a8d25e8-b137-47da-ae57-1807008c87c7",
      "name": "Code1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        224,
        416
      ],
      "id": "cbecf0ac-a0c7-4642-bd8c-79debcf78263",
      "name": "Wait",
      "webhookId": "7aff8deb-5a3b-4d83-b859-dcd16a4ada1c"
    },
    {
      "parameters": {
        "url": "=https://api10.unipile.com:14019/api/v1/chats/{{ $('Code1').item.json.chat_id }}/messages",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "after",
              "value": "={{ new Date(new Date($('Code1').item.json.last_checked_timestamp).getTime() - 15000).toISOString() }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "XHWV27Up.JbPrur+wrsgBJilxHlfCqb1Y8mwO3A/Z0b+wj6a1eyY="
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        416,
        416
      ],
      "id": "55cfa2de-d5ac-4463-b3bf-a713c2d8cb24",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// Process Unipile conversation response with robust message ordering\nif (!items || items.length === 0) {\n  return [{ json: { error: \"No input data received\" } }];\n}\n\nconst inputData = items[0].json;\nconst messagesList = inputData.items || [];\nconst conversationId = inputData.conversation_id || `conv_${Date.now()}`;\nconst maxExchanges = 2;\n\n// Identify participant IDs\nlet ourAttendeeId = \"\";\nlet speakerAttendeeId = \"\";\n\nmessagesList.forEach(message => {\n  if (message.is_sender === 1) {\n    ourAttendeeId = message.sender_attendee_id;\n  } else if (message.is_sender === 0) {\n    speakerAttendeeId = message.sender_attendee_id;\n  }\n});\n\n// **KEY FIX**: Sort messages by timestamp to get correct chronological order\nconst sortedMessages = messagesList.sort((a, b) => \n  new Date(a.timestamp) - new Date(b.timestamp)\n);\n\n// Get the ACTUAL last message (chronologically)\nconst lastMessage = sortedMessages.length > 0 ? sortedMessages[sortedMessages.length - 1] : null;\n\n// **CORRECT LOGIC**: Check is_sender field of the chronologically last message\nlet lastMessageFromSpeaker = false;\nif (lastMessage) {\n  lastMessageFromSpeaker = (lastMessage.is_sender === 0); // 0 means from speaker\n}\n\n// Count messages for exchange calculation\nlet agentMessagesCount = 0;\nlet speakerMessagesCount = 0;\n\nsortedMessages.forEach(message => {\n  if (message.sender_attendee_id === ourAttendeeId) {\n    agentMessagesCount++;\n  } else if (message.sender_attendee_id === speakerAttendeeId) {\n    speakerMessagesCount++;\n  }\n});\n\n// Calculate completed exchanges\nconst currentExchangeCount = Math.max(0, Math.min(agentMessagesCount - 1, speakerMessagesCount));\n\n// **ROBUST STATUS DETERMINATION**\nlet conversationStatus;\nlet shouldGenerateReply = false;\nconst conversationActive = currentExchangeCount < maxExchanges;\n\nif (lastMessageFromSpeaker && conversationActive) {\n  conversationStatus = \"reply_needed\";\n  shouldGenerateReply = true;\n} else if (!lastMessageFromSpeaker && conversationActive) {\n  conversationStatus = \"waiting_for_speaker\";\n} else if (currentExchangeCount >= maxExchanges) {\n  conversationStatus = \"completed\";\n} else {\n  conversationStatus = \"waiting\";\n}\n\n// Build conversation history in chronological order\nconst conversationHistory = sortedMessages.map(msg => ({\n  sender: msg.sender_attendee_id === ourAttendeeId ? \"agent\" : \"speaker\",\n  message: msg.text,\n  timestamp: msg.timestamp,\n  is_sender: msg.is_sender\n}));\n\nreturn [{\n  json: {\n    // Conversation tracking\n    conversation_id: conversationId,\n    exchange_count: currentExchangeCount,\n    max_exchanges: maxExchanges,\n    \n    // Status and actions  \n    status: conversationStatus,\n    should_generate_reply: shouldGenerateReply,\n    conversation_active: conversationActive,\n    next_action: shouldGenerateReply ? \"generate_ai_reply\" : \n                (conversationActive ? \"continue_waiting\" : \"send_final_notification\"),\n    \n    // Message analysis\n    last_message_from_speaker: lastMessageFromSpeaker,\n    last_message: lastMessage || {},\n    \n    // Participant info\n    our_attendee_id: ourAttendeeId,\n    speaker_attendee_id: speakerAttendeeId,\n    \n    // Full context\n    conversation_history: conversationHistory,\n    messages_total: sortedMessages.length,\n    agent_messages_count: agentMessagesCount,\n    speaker_messages_count: speakerMessagesCount,\n    \n    // Debug info\n    last_message_is_sender_value: lastMessage ? lastMessage.is_sender : null,\n    last_message_text: lastMessage ? lastMessage.text : \"\",\n    last_checked_timestamp: new Date().toISOString()\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        416
      ],
      "id": "c54588db-b61f-4ade-bf99-33da3bd04b5f",
      "name": "Code2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b0a82f3d-4535-4a9c-8e6b-7ca6e8084083",
              "leftValue": "={{ $json.last_message_from_speaker }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        848,
        416
      ],
      "id": "3b6c37f7-fe1d-45bf-a8b3-6e4faefbb2bf",
      "name": "If"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert LinkedIn conversation specialist managing speaker recruitment with advanced conversational intelligence. Your mission is to guide each conversation through strategic phases toward successful speaker booking or professional closure.\n\n## INPUT CONTEXT ANALYSIS:\n**Speaker Profile:**  {{ $('Code').item.json.profile_data.full_name }}\n({{ $('Code').item.json.profile_data.current_title }} at {{ $('Code').item.json.profile_data.current_company }})\n\n**Event Information:**\n- Type: {{ $('Code').item.json.event_data.event_type }} \n- Topic: {{ $('Code').item.json.event_data.event_topic }}\n- Date: {{ $('Code').item.json.event_data.event_date }}\n- Location: {{ $('Code').item.json.event_data.event_location }}\n- Audience: {{ $('Code').item.json.event_data.audience }}\n\n**Conversation State:**\n- Current Exchange: {{ $json.exchange_count + 1 }}/{{ $json.max_exchanges }}\n- Their Latest Message: \"{{ $json.last_message_text }}\"\n- Previous Messages History:\n{{ $('Code2').item.json.conversation_history.map((msg, i) => `${i+1}. ${msg.sender.toUpperCase()}: \"${msg.message}\" (${new Date(msg.timestamp).toLocaleTimeString()})`).join('\\n') }}\n\n\n## STRATEGIC CONVERSATION FRAMEWORK:\n\n### **Phase 1: Interest Assessment (Exchange 1)**\n**Objective**: Gauge initial interest and establish relevance\n- Personalize with their expertise/company\n- Connect their background to event value\n- Ask open-ended question about interest\n- Create curiosity about the opportunity\n\n### **Phase 2: Information & Engagement (Exchange 2)**\n**Objective**: If user asks, then provide details, address questions, build excitement\n- Answer their  questions with detailed information\n- **Auto-Generate Missing Details**: Create plausible, relevant details if event info is incomplete\n- Address any concerns or hesitations\n- Build value proposition\n\n### **Phase 3: Meeting Scheduling (Exchange 3)**\n**Objective**: Propose concrete next steps and schedule meeting\n- Suggest specific dates for brief call/meeting (15-30 minutes)\n- Offer 2-3 time options over next week\n- Emphasize low commitment, high value discussion\n- Provide clear call-to-action\n\n## INTELLIGENT RESPONSE GENERATION:\n\n### **Conversation State Analysis:**\nBefore generating response, determine:\n1. **Current Phase** based on exchange count and their response pattern\n2. **Interest Level**: Positive, Neutral, Negative, Questioning\n3. **Information Gaps**: What details they're asking for\n4. **Next Action**: What phase to transition to\n\n### **Response Intelligence Rules:**\n\n**For Positive Responses** (\"interested\", \"tell me more\", questions):\n- Move to next phase quickly\n- Provide rich details\n- Build momentum toward meeting\n\n**For Neutral Responses** (brief, non-committal):\n- Re-engage with specific value proposition\n- Ask targeted questions about their interests\n- Provide concrete benefits\n\n**For Negative Responses** (\"busy\", \"not interested\"):\n- Acknowledge gracefully\n- Offer low-pressure alternative (future events, resources)\n- Leave door open professionally\n\n**For Question-Heavy Responses**:\n- Answer all questions thoroughly\n- Generate plausible details for missing information\n- Use questions to gauge interest level\n\n### **Detail Generation Guidelines:**\nWhen event information is missing, intelligently generate:\n- **Date/Time**: Realistic dates 2-4 weeks out, business hours\n- **Duration**: Appropriate for event type (2-3 days for hackathon, 1 day for conference)\n- **Audience Size**: Realistic numbers (50-500 for local, 200-2000 for virtual)\n- **Compensation**: \"We offer speaker honorarium and travel coverage\" (if appropriate)\n- **Session Format**: 30-45 min keynote, panel, workshop based on their expertise\n- **Registration**: \"200+ developers and entrepreneurs already registered\"\n- **Partners**: Industry-relevant sponsors or partners\n\n### **Meeting Scheduling Intelligence:**\nAlways propose specific options:\n- \"Would you be available for a brief 20-minute call this Thursday or Friday?\"\n- \"I can schedule us for Tuesday 2 PM or Wednesday 4 PM - which works better?\"\n- \"Let's hop on a quick Zoom call to discuss details - are you free Monday or Wednesday afternoon?\"\n\n## CONVERSATION FLOW EXAMPLES:\n\n**Phase 1 → 2 Transition:**\nTheir response: \"This sounds interesting, tell me more about the audience\"\nYour response: \"Great to hear your interest! We have 300+ registered participants including CTOs, product managers, and senior developers from companies like TechCorp and StartupXYZ. Your DevRel experience would be perfect for our 'Building Developer Communities' track. The event runs March 15-16 virtually, with keynotes, hands-on workshops, and networking sessions. What specific aspects of DevRel would you be most excited to share?\"\n\n**Phase 2 → 3 Transition:**\nTheir response: \"That audience sounds perfect for what I do\"\nYour response: \"Excellent! I can already see how valuable your insights would be for our attendees. Let's schedule a brief 20-minute call to discuss the session format and logistics. Are you available this Thursday at 3 PM or Friday at 11 AM? I'll send a calendar invite with all the event details and we can finalize everything quickly.\"\n\n**Handling Objections:**\nTheir response: \"I'm quite busy with work commitments\"\nYour response: \"I completely understand - March is always hectic! The great news is we're flexible on format. Even a 20-minute lightning talk or joining a panel discussion would be incredibly valuable. Plus, it's virtual so no travel time. Would you be open to a quick 10-minute call to explore what might work with your schedule?\"\n\n## OUTPUT REQUIREMENTS:\n\n**Message Constraints:**\n- Maximum 280 characters (LinkedIn limit)\n- Professional yet conversational tone\n- Always end with clear next step or question\n- Include specific details or meeting times when appropriate\n\n**Prohibited Content:**\n- Generic templates or corporate speak\n- Pushy sales language\n- Multiple questions in one message\n- Vague next steps\n\n**Required Elements:**\n- Reference their specific background/expertise\n- Provide concrete event details (generate if missing)\n- Clear value proposition for their participation\n- Specific call-to-action appropriate for conversation phase\n\n## CONVERSATION CONCLUSION LOGIC:\n\n**Success Indicators**: Schedule meeting, request more details, express timeline interest\n**Inconclusive**: Engaged but no commitment after 3 exchanges\n**Unsuccessful**: Clear decline, no response, or disinterest\n\n**Final Exchange Protocol**:\nIf at exchange 3 without clear success:\n- Summarize opportunity briefly\n- Provide contact info for future reference\n- Thank them professionally\n- Leave door open for future events\n\nGenerate only the next message text. Be strategic, intelligent, and results-focused while maintaining authenticity and professionalism.\n\nAlways output responses in English.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1072,
        416
      ],
      "id": "c4452d45-708a-4fc2-8b46-333efa2558df",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1072,
        624
      ],
      "id": "d830091f-3148-4073-91e1-e3a84ed978af",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "JoCkVMwB4xajc9Kb",
          "name": "Shailesh"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api10.unipile.com:14019/api/v1/chats/{{ $('HTTP Request2').item.json.chat_id }}/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "XHWV27Up.JbPrur+wrsgBJilxHlfCqb1Y8mwO3A/Z0b+wj6a1eyY="
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "account_id",
              "value": "BTpnX38WTTe5eCx9_Iq_tw"
            },
            {
              "name": "text",
              "value": "={{ $json.output }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1456,
        416
      ],
      "id": "7b74a6a1-01d4-4722-b34e-c21044c5bc4c",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "jsCode": "// Update exchange counter after sending AI reply - PRESERVE ALL DATA\nconst conversationData = $('Code2').first().json;\nconst aiReply = $('AI Agent1').first().json.output;\nconst messageResponse = items[0].json; // From HTTP Request3\n\n// Increment exchange count since we just sent a response\nconst updatedExchangeCount = conversationData.exchange_count + 1;\nconst maxExchanges = conversationData.max_exchanges || 2;\n\n// Determine if conversation should continue\nconst shouldContinue = updatedExchangeCount < maxExchanges;\nconst conversationCompleted = updatedExchangeCount >= maxExchanges;\n\n// **PRESERVE ALL ORIGINAL DATA** from Code2\nconst updatedContext = {\n  // Preserve ALL original data from Code2\n  ...conversationData,\n  \n  // Override specific fields that need updating\n  exchange_count: updatedExchangeCount,\n  max_exchanges: maxExchanges,\n  conversation_active: shouldContinue,\n  status: conversationCompleted ? \"completed\" : \"waiting_for_response\",\n  should_continue: shouldContinue,\n  \n  // Add new tracking data\n  last_ai_message: aiReply,\n  last_message_sent_at: new Date().toISOString(),\n  last_checked_timestamp: new Date().toISOString(),\n  \n  // Preserve chat_id from Code1\n  chat_id: $('Code1').first().json.chat_id,\n  polling_interval: 5000\n};\n\nreturn [{ json: updatedContext }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1664,
        416
      ],
      "id": "68f783d8-f41e-4507-bdb9-25798884498c",
      "name": "Code3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "1328118c-0ead-40c0-91ee-5d6ed9663600",
              "leftValue": "={{ $json.should_continue }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1872,
        416
      ],
      "id": "715e8b7e-e917-408b-a1bf-52a6628944b5",
      "name": "If1"
    },
    {
      "parameters": {
        "jsCode": "// Final Conversation Analyzer - PRESERVE ALL ORIGINAL DATA\nconst finalData = items[0].json;\n\n// **CRITICAL: Get missing data from earlier nodes if not present**\nconst eventData = finalData.event_data || $('Code1').first().json.event_data;\nconst profileData = finalData.profile_data || $('Code2').first().json.profile_data;\nconst linkedinUrl = finalData.linkedin_url || $('Code2').first().json.linkedin_url;\n\nconst conversationHistory = finalData.conversation_history || [];\n\n// Extract speaker messages safely\nconst speakerMessages = conversationHistory\n  .filter(msg => msg && msg.sender === \"speaker\")\n  .map(msg => (msg.message || \"\").toLowerCase())\n  .join(\" \");\n\n// Simple keyword-based outcome determination\nconst positiveKeywords = [\"interested\", \"yes\", \"tell me more\", \"when\", \"calendar\", \"schedule\", \"sounds good\", \"great\", \"perfect\"];\nconst negativeKeywords = [\"not interested\", \"busy\", \"no\", \"can't\", \"unable\", \"not available\", \"sorry\"];\n\nconst hasPositive = positiveKeywords.some(keyword => speakerMessages.includes(keyword));\nconst hasNegative = negativeKeywords.some(keyword => speakerMessages.includes(keyword));\n\nlet finalOutcome = \"INCONCLUSIVE\";\nlet outcomeReason = \"Reached maximum exchanges without clear outcome\";\n\nif (hasPositive && !hasNegative) {\n  finalOutcome = \"SUCCESSFUL\";\n  outcomeReason = \"Speaker showed interest and engagement\";\n} else if (hasNegative) {\n  finalOutcome = \"UNSUCCESSFUL\";\n  outcomeReason = \"Speaker declined or showed disinterest\";\n} else if (finalData.exchange_count >= (finalData.max_exchanges || 2)) {\n  finalOutcome = \"NEEDS_FOLLOW_UP\";\n  outcomeReason = \"Speaker remained engaged but needs human follow-up\";\n}\n\nconst lastMessageText = (finalData.last_message && finalData.last_message.text) || \n                       (finalData.last_message_text) || \n                       \"No final message\";\n\nreturn [{\n  json: {\n    // **PRESERVE ALL ORIGINAL FIELDS**\n    ...finalData,\n    \n    // **ENSURE CRITICAL DATA IS PRESENT**\n    event_data: eventData,\n    profile_data: profileData, \n    linkedin_url: linkedinUrl,\n    \n    // Add analysis results\n    final_outcome: finalOutcome,\n    outcome_reason: outcomeReason,\n    conversation_completed_at: new Date().toISOString(),\n    total_exchanges: finalData.exchange_count || 0,\n    conversation_summary: `${finalData.exchange_count || 0} exchanges completed. Last message: \"${lastMessageText}\"`\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2112,
        432
      ],
      "id": "44facbf3-8b83-4902-becc-a3192f0fe894",
      "name": "Code4"
    },
    {
      "parameters": {
        "jsCode": "// Final Slack Notification - Get LinkedIn URL from Code node\nconst result = items[0].json;\n\n// Extract data safely from current result\nconst eventType = (result.event_data && result.event_data.event_type) ;\nconst eventTopic = (result.event_data && result.event_data.event_topic) ;\nconst slackUserId = result.slack_user_id || \"U1234567890\";\nconst profileName = (result.profile_data && result.profile_data.full_name) ;\nconst finalOutcome = result.final_outcome || \"INCONCLUSIVE\";\nconst outcomeEmoji = finalOutcome === \"SUCCESSFUL\" ? \"✅\" : \n                    finalOutcome === \"UNSUCCESSFUL\" ? \"❌\" : \"🔄\";\n\n// **CRITICAL: Get LinkedIn URL from Code node as specified**\nconst linkedinUrl = $('Code').first().json.linkedin_url;\n\n// Validate LinkedIn URL is present (as you specified it can't be unavailable)\nif (!linkedinUrl) {\n  console.error(\"LinkedIn URL not found in Code node!\");\n  return [{\n    json: {\n      channel: slackUserId,\n      text: `ERROR: LinkedIn URL missing from Code node for ${profileName}`,\n      blocksUi: JSON.stringify({ blocks: [] })\n    }\n  }];\n}\n\n// Create blocks as JSON object first (same style as your reference)\nconst blocks = [\n  {\n    type: \"section\",\n    text: {\n      type: \"mrkdwn\",\n      text: `*${outcomeEmoji} LinkedIn Outreach Result for your ${eventType} event on ${eventTopic}*`\n    }\n  },\n  {\n    type: \"section\",\n    text: {\n      type: \"mrkdwn\",\n      text: `*Speaker Profile:* <${linkedinUrl}>`\n    }\n  },\n  {\n    type: \"divider\"\n  }\n];\n\n// Add outcome details in fields format\nblocks.push({\n  type: \"section\",\n  fields: [\n    {\n      type: \"mrkdwn\",\n      text: `*Outcome:* ${finalOutcome}`\n    },\n    {\n      type: \"mrkdwn\",\n      text: `*Exchanges:* ${result.total_exchanges || 0}/3`\n    }\n  ]\n});\n\n// Add conversation summary if available\nif (result.outcome_reason) {\n  blocks.push({\n    type: \"section\",\n    text: {\n      type: \"mrkdwn\",\n      text: `*Summary:* ${result.outcome_reason}`\n    }\n  });\n}\n\n// Add conversation details if available\nif (result.conversation_summary) {\n  blocks.push({\n    type: \"divider\"\n  });\n  blocks.push({\n    type: \"section\",\n    text: {\n      type: \"mrkdwn\",\n      text: `*Conversation Details:*\\n${result.conversation_summary}`\n    }\n  });\n}\n\n// Add footer context (like your reference example)\nblocks.push({\n  type: \"context\",\n  elements: [\n    {\n      type: \"mrkdwn\",\n      text: `📊 Total exchanges: ${result.total_exchanges || 0} | ⏰ Completed: ${new Date().toLocaleString()}`\n    }\n  ]\n});\n\n// Convert to the string format that n8n expects (exactly like your reference)\nconst blocksUiString = JSON.stringify({ blocks: blocks });\n\nreturn [{\n  json: {\n    channel: slackUserId,\n    blocksUi: blocksUiString,\n    text: `LinkedIn outreach ${finalOutcome}: ${profileName} for your ${eventType} event on ${eventTopic}`\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2320,
        432
      ],
      "id": "e22e4a60-f098-4a74-a72b-948c81e86e55",
      "name": "Code5"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09DLDXFGHW",
          "mode": "id"
        },
        "messageType": "block",
        "blocksUi": "={{ $json.blocksUi }}",
        "text": "=\"{{ $json.text }}\"",
        "otherOptions": {
          "includeLinkToWorkflow": false,
          "unfurl_links": true
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        2576,
        432
      ],
      "id": "e120dede-f3d8-48d6-9299-fcbd36df62b2",
      "name": "Send a message1",
      "webhookId": "d5b364b0-d93b-4a1f-ade0-242de6cf5b7f",
      "credentials": {
        "slackApi": {
          "id": "n2dMlXzdJSEwODNV",
          "name": "Slack account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "profile_extract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TavilySearch": {
      "ai_tool": [
        [
          {
            "node": "Linkedin_Profile_Analyser",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Linkedin_Profile_Analyser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Linkedin_Profile_Analyser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "Linkedin_Profile_Analyser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Linkedin_Profile_Analyser": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "profile_extract": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "7d5691a2-0710-46b7-9ed8-241d55d1e6c8",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8b1f596cfd3dd03d4183608d78ae1a40e43ec82119e85c7a0b415a7263be543d"
  },
  "id": "ikCEJzyxPwgmshuU",
  "tags": []
}